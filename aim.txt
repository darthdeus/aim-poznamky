# i386, 32b mod, linearni adresy, uzivatelsky mod

- int 8, 16, 32, (64) ... napr. pri nasobeni dvou 32b cisel muzeme mit 64b vysledek
- dvojkovy doplnek
- little endian
  - 0x12345678 se zapise jako | 78 | 56 | 34 | 12 |
- float 32(24b mantisa), 64(53), 80(64), [16(11)] jen ve vektorovych
  instrukcich, hodi se napr na 3d grafiku nebo na zpracovani HDR fotek
- vektory 128, (256)
- pamet rozdelena od 0 do 2^32-1 (man 3 mmap, munmap)

- EAX |
- EBX | "universalni"
- ECX |
- EDX |
---------------------
- ESI | source/dest.
- EDI |    index
---------------------
- EBP - base pointer, zacatek lokalnich promennych
- ESP - stack pointer, nejnizsi misto v pameti, ktere patri zasobniku (vrchol zasobniku)
- EIP - instruction pointer, aktualni pozice programu v pameti
      - behem provadeni instrukce je to adresa odkud se bude nacitat dalsi instrukce
      - nemusi ani existovat, nic se s nim delat neda
- EFLAGS - Z: predchozi operace nula (zero), C: preteceni (carry), S: predchozi
              operace zaporne cislo (sign), D: ovlivnuje, jestli se po pameti chodi popredu
              nebo pozpatku
         - nastavuji je bezne instrukce
         - instrukce podmineneho skoku muzou vyuzit hodnoy flagu

- floatove registry tvori 8-registrovy zasobnik
- floatovy zasobnik ST(0) ... ST(7)
- do kazdeho se vejde 80b float
- indexuji se cyklicky
- operace ctou prvni operand z ST(0) a druhy odkudkoliv, a zapisou zpatky do ST(0)
- FPUCR, FPUSR - ridici a stavovy floatovy registr
               - floatove stavy jsou kumulativni, muzu kontrolovat az po vice operacich

- XMM0 - XMM7 (128b)
- YMM0 - YMM7 (256b)
- MXCSR - ridici a stavovy registr pro vektorove registry

Intel: ADD EAX,7
AT&T:  addl $7,%eax

8  - b
16 - w
32 - l
64 - q

- poradi prirazeni je opacne, dest. je napravo
- % se pise pred registr, $ pred literal (konstantu zadratovanou do instrukce)
- $7 je konstanta 7, 7 je reference na obsah pameti na adrese 7 (u intelu se pise [7])
- explicitni velikost

addl $7,(%eax)
ADD  DWORD PTR [EAX], 7

4(%eax) - vezmi obsah eax, k nemu pricti 4, a vyjde adresa kde najdes to, s cim se pocita
4(%eax, %ecx, 2) - pristup na adresu [eax + 2*ecx + 4], hodi se pri adresovani indexem

# ABI (Application Binary Interface) i386, C a Linux

- lisi se architekturou, jazykem a operacnim systemem
- konvence rika, ze na 0 neni namapovana zadna pamet
- vsechno co jde, se predava pres zasobnik
- f(int x, int y)
  - nejdriv na zasobnik vlozi y
  - pak na zasobnik vlozi x
  - predava se po 4B slotech (80b floaty zabiraji 3 sloty)
- volajici pouziva instrukci call
  - skoci na adresu podprogramu
  - na zasobnik vlozi navratovou adresu


         |               | |
         |               | |
         ----------------- |
      +12| x             | |
         ----------------- |
ulozi +8 | y             | | volajici
volajici ----------------- |
ESP ->+4 | navrat adresa | -
         -----------------
EBP ->+0 | stare EBP     | -
         ----------------- |
         | lokalni       | | volany
         | promenne      | |
         ----------------- |
         | pracovni      | |
         | prostor       | -

         -----------------
         | red zone      | na amd64 mame 128b pod stack pointerem, nemusi se hybat stack pointerem

volajici odstranuje argumenty, protoze volany nevi, kolik dostal argumentu (prvni argument je posledni dole)

- pokud je vysledek 32b, vraci se v EAX
- pokud je vysledek 64b, vraci se v EDX:EAX
- pokud je to float, vraci se v ST(0)
- pokud je to struktura, volajici si udela misto na zasobniku, a volany dostane
  0. argument, kde se preda adresa kam se to ma ulozit

# amd64

      b   w   l   q
- int 8, 16, 32, 64, (128)
- pamet je 2^64-1
- adresy muzou byt zaporne, pokud jsou zaporne tak je to pamet procesoru, kladne adresy jsou uzivatelske
-      RAX, RBX, RCX, RDX, RSI, RDI, RBP, RSP, RIP
- nebo R0,   R1,  R2,  R3,  R4,  R5,  R6,  R7, ..., R15
- muzeme psat R8L, R8W, R0H
- da se relativne adresovat vuci RIP

- XMM0-7 se rozsiruje na XMM15 (stejne tak YMM15)

- leave (odrolovani zasobniku)


# druhy pameti

- staticka: klopny obvod, rychly, velka bunka (nemuzeme jich mit hodne)
- dynamicka: jeden kodenzator, ctenim se vybije, musi se znovu nahrat, casem se
  vybiji (protoze nemame nekonecne velky odpor), tzn. musi se refreshovat

## cache plne asociativni

- [ adresa, data ]
- radky po 64B [ tag 26b | pos 6b ]
- cache si pamatuje jenom tagy, tzn. [ tag | data ]

- LRU (Least-Recently Used)

- write-through zapisy
  - zapisy se zapisuji skrz cache, tzn. je vzdycky koherentni,
  - zapis ale blokuje nez se zapise do hlavni pameti, tzn je pomalejsi a cache zrychluje jenom cteni

- write-back zapisy
  - v cache je dirty bit

## primo adresovana cache (directly mapped)

- h(adresa) -> radek
- 64kB cache s 64B radky -> 1024 radku -> 10b index
- [ tag | index 10 | pos 6 ]

## k-cestne mnozinove asociativni cache

- h(adresa) -> mnozina s $k$ radky
- 64kB, 4-cestna, 1024 radku -> 256 mnozin -> index ma 8b
- [ tag 18b | index 8b | pos 6b ]

## Intel Core 2 Duo

- L1I 32kB 4-cestna
- L1D 32kB 8-cestna
- L2   2MB 8-cestna


# Memory Management Unit

----        ----
|  |  MMU   |  |
|--| -----> |--|
|  |        |  |
|--|        |--|
|  |        |  |
----        ----
 VA          PA

stranky 4kB

- [ i1 10 | i2 10 | pos 12 ]
- registr CR2, ktery odkazuje na koren strankoveho stromu
- pouzije se prvnich 10b na nalezeni stranky druhe urovne
  - bud se dalsich 10b pouzije na dalsi uroven strankovaciho stromu,
    kde se uz najde samotny preklad
  - nebo se adresuje primo prvni urovni, pak jsou stranky 4MB

# TLB (Translation Look-aside Buffer)

- udrzi si radove stovky prekladu pomoci hornich 20b adresy (dolnich 12b je adresa v ramci stranky)
- TLB je casto viceurovnove

# virtualne indexovana, fyzicky tagovana

- 32kB 8-cestna
- 512 radku, 64 mnozin
- [ tag | idx 6 | pos 6 ]
- muzu paralelne zadat TLB preklad pomoci hornich 20b a L1D pomoci dolnich 12b


# DRAM

- matice, ne pole
- pamet se cte nejprve do radkoveho bufferu (pak pres PRECHARGE zpatky)

- L1_DTLB_MISS_AND_L2_DTLB_HIT


# DU

- na strankach prednasky je ke stazeni program ktery grafy z prednasky
  generuje, vyzkouset co to dela, zkusit vestit z krivek :)


# prednaska 5

- fetch
- decode - mikro-operace
- op. fetch
- compute - vicemene trivialni v porovnani s ostatnimi fazemi :)
- retire - zapiseme vysledky

- pipelining
- store forwarding - muze se predat mezivisyledek dalsi instrukci zkratkou
- latence/propustnost

- superskalarni vyhodnocovani
- rozklad na mikro-operace

xorl %eax1, %eax1
movl %eax1, (%edi)
movl $42, %eax2
movl %eax2, 4(%edi)

- register rename
  - procesor ma treba 32 vnitrnich registru, vsechny obecne
  - udrzuje si tabulku, ktera rika, ktery z registru se jmenuje EAX

- predikce skoku + spekulace
- u instrukce jde napovidat kam spis skoci (gcckovy __builtin_expect)

predikce
  - staticka
    - skoc dozadu vzdy, dopredu nikdy
    - skok daleko neprojde, skok blizko projde (predpokladame, ze se jedna o osetreni chyby, a pokud nastane, tak mam jine starosti nez predikci :))

  - dynamicka, saturujici citac
    - BTB = Branch Target Buffer
    - -k, ..., -1, 1, ..., k
    - na konci se zastavi a nepreteka
    - na starem pentiu (SN), (WN), (WT), (ST) ... -2, -1, +1, +2
    - asociativne se hleda podle adresy skoku, BTB se chova jako cache, tzn. pokud se tam najde tak ma citac, pokud se nanjde tak se cachuje odznova

  - pole citacu
    - poridime si 2^h citacu
    - drzime si historii podlednich `h` skoku
    - pro danou historii bereme citac z pole ktery sedi na bitovou masku historie
    - dokaze predikovat smycky ktere jdou po 2 nebo 3

    - globalni historie
      - pamatujeme si napr. poslednich 12 kroku (tj. 2^12 = 4096 citacu)

  - agree prediktor
    - lokalni citac pro jednotlive skoky
    - globalni historie, ktera se pouziva pouze na predikci pocatecniho
    - globalni predikce chyta jenom omyly lokalni predikce
    - muze se pouzivat napr. hashovaci tabulka, kde pokud nemame zaznam tak predpokladame, ze se lokalni prediktor trefil :)

  - detektor smycek
    - vyhledava pattern, ktery se chova jako smycka
    - "tohle je smycka, ktera obvykle povede 4 iterace"

  - zasobnikovy prediktor
    - udrzuje si treba poslednich 16 navratovych adres
    - call pridava, ret odebira
    - neni spolehliva, ale predikuje
    - zmatou ho napr. coroutiny

  - HYBRIDNI PREDIKTOR
    - udrzuje si v BTB ktera metoda predikce je na jaky skok uspesna

  - AMD pry pouziva neuronove site na predikci

# Intel Core2 (puvodne Pentium M)

prediktor
  |
  V
fetch (16B/T)
  |
  V
predecode - urcuje hranici instrukci v ramci 16B okna
  |
  V
decode (3/T)
  | 3u-op/T
  V
rename (64 reg - nejspis)
  |
  V
reorder - ROB (40 polozek, v kazde muze byt jedna u-operace)
  |     - resi zavislosti
  V     - dohromady s *reservation station* resi scheduling (na AMD je to jedna jednotka)
reservation
  station    - 20 u-ops
  /   |   \
 V    V    V
ruzne jednotky pro pocitani  - bitove posuny o ne-konstantu pry umi jenom jedna jednotka
a praci s pameti             - 2*a - bud posun doleva, nebo a+a, nebo 2*a, nebo LEA
  \   |   /                  - prekladac vi, ktera jednotka umi co, a prelozi to podle potreby :)
   \  |  /                    - napr. pokud to delam 3x, tak to muze udelat tremi zpusoby,
    retire                      aby se vyuzily vsechny jednotky CPU

na hranach jsou fronty a vsechno se bufferuje, pokud reorder napr. nestiha

# spinlock/libpthread

kernelovy mutex
futex
- indexovane fyz. adresou
- futex_wait(&futex, expected value)
- futex_wake(&futex, #procesu)

lock:
if ((c = cmpxchg(f, 0, 1)) != 0) {
  do { if (c == 0 || cmpxchg(f, 1, 2) != 0)
         fuex_wait(&f, 0);
  } while (c = cmpxchg(f, 0, 2));
}

unlock:
if (atomic(dec(f) != 1) {
  f = 0;
  futex_wake(&f, 1);
}

# Transakcni pamet - Intel TSX (Transaction Sync. eXtension)

XSTART addr - adresa v pameti kde sidli kod na selhani transakce
 |
XABORT -> muzu si predat vlastni EAX
 |
XEND - pokud selze, EAX = kod chyby
